import { NextApiRequest, NextApiResponse } from 'next';
import { google } from 'googleapis';

interface Product {
  id: string;
  name: string;
  price: number;
  image_url: string;
  affiliate_url: string;
  category: string;
  description?: string;
  discount_percent?: number;
  is_featured: boolean;
  stock_status: 'in_stock' | 'low_stock' | 'out_of_stock';
}

interface ApiResponse {
  products?: Product[];
  error?: string;
  cached?: boolean;
  timestamp?: number;
}

// Cache for storing sheet data
const cache = new Map<string, { data: any; timestamp: number }>();
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

async function getGoogleSheetsData(
  sheetId: string, 
  range: string,
  apiKey?: string,
  serviceAccountPath?: string
): Promise<any[][]> {
  try {
    let auth;
    
    if (serviceAccountPath && process.env.GOOGLE_SHEETS_SERVICE_ACCOUNT) {
      // Use service account authentication
      const serviceAccount = JSON.parse(process.env.GOOGLE_SHEETS_SERVICE_ACCOUNT);
      auth = new google.auth.GoogleAuth({
        credentials: serviceAccount,
        scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly']
      });
    } else if (apiKey || process.env.GOOGLE_SHEETS_API_KEY) {
      // Use API key for public sheets
      auth = apiKey || process.env.GOOGLE_SHEETS_API_KEY;
    } else {
      throw new Error('No authentication method provided');
    }

    const sheets = google.sheets({ version: 'v4', auth });
    
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: sheetId,
      range: range,
      majorDimension: 'ROWS',
      valueRenderOption: 'UNFORMATTED_VALUE',
      dateTimeRenderOption: 'FORMATTED_STRING'
    });

    return response.data.values || [];
  } catch (error) {
    console.error('Error fetching Google Sheets data:', error);
    throw error;
  }
}

function validateAndTransformRow(row: any[], index: number): Product | null {
  try {
    // Skip header row
    if (index === 0) return null;
    
    // Validate required fields
    if (!row[0] || !row[1] || !row[2] || !row[3] || !row[4]) {
      console.warn(`Skipping row ${index + 1}: Missing required fields`);
      return null;
    }

    // Transform and validate data
    const product: Product = {
      id: String(row[0]).trim(),
      name: String(row[1]).trim(),
      price: parseFloat(row[2]) || 0,
      image_url: String(row[3]).trim(),
      affiliate_url: String(row[4]).trim(),
      category: String(row[5] || 'Uncategorized').trim(),
      description: row[6] ? String(row[6]).trim() : undefined,
      discount_percent: row[7] ? parseFloat(row[7]) : undefined,
      is_featured: Boolean(row[8] === 'TRUE' || row[8] === '1' || row[8] === 1 || row[8] === true),
      stock_status: (['in_stock', 'low_stock', 'out_of_stock'].includes(row[9]) 
        ? row[9] 
        : 'in_stock') as 'in_stock' | 'low_stock' | 'out_of_stock'
    };

    // Validate URLs
    try {
      new URL(product.image_url);
      new URL(product.affiliate_url);
    } catch (e) {
      console.warn(`Invalid URL in row ${index + 1}:`, e);
      return null;
    }

    // Validate price
    if (product.price <= 0) {
      console.warn(`Invalid price in row ${index + 1}: ${product.price}`);
      return null;
    }

    // Validate discount percentage
    if (product.discount_percent !== undefined && (product.discount_percent < 0 || product.discount_percent > 100)) {
      console.warn(`Invalid discount percentage in row ${index + 1}: ${product.discount_percent}`);
      product.discount_percent = undefined;
    }

    return product;
  } catch (error) {
    console.warn(`Error processing row ${index + 1}:`, error);
    return null;
  }
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<ApiResponse>
) {
  // Only allow GET requests
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { 
      sheetId, 
      range = 'Sheet1!A:J', 
      category,
      apiKey,
      serviceAccountPath 
    } = req.query;

    // Validate required parameters
    if (!sheetId || typeof sheetId !== 'string') {
      return res.status(400).json({ error: 'Sheet ID is required' });
    }

    // Create cache key
    const cacheKey = `${sheetId}-${range}-${category || 'all'}`;
    
    // Check cache first
    const cached = cache.get(cacheKey);
    if (cached && (Date.now() - cached.timestamp) < CACHE_DURATION) {
      return res.status(200).json({
        products: cached.data,
        cached: true,
        timestamp: cached.timestamp
      });
    }

    // Fetch fresh data from Google Sheets
    const rawData = await getGoogleSheetsData(
      sheetId,
      typeof range === 'string' ? range : 'Sheet1!A:J',
      typeof apiKey === 'string' ? apiKey : undefined,
      typeof serviceAccountPath === 'string' ? serviceAccountPath : undefined
    );

    // Transform and validate data
    const products = rawData
      .map(validateAndTransformRow)
      .filter((product): product is Product => product !== null);

    // Filter by category if specified
    let filteredProducts = products;
    if (category && typeof category === 'string') {
      filteredProducts = products.filter(
        product => product.category.toLowerCase() === category.toLowerCase()
      );
    }

    // Update cache
    cache.set(cacheKey, {
      data: filteredProducts,
      timestamp: Date.now()
    });

    // Set cache headers
    res.setHeader('Cache-Control', 'public, s-maxage=300, stale-while-revalidate=600');
    
    return res.status(200).json({
      products: filteredProducts,
      cached: false,
      timestamp: Date.now()
    });

  } catch (error) {
    console.error('API Error:', error);
    
    // Return appropriate error response
    if (error instanceof Error) {
      if (error.message.includes('not found')) {
        return res.status(404).json({ error: 'Spreadsheet not found' });
      }
      if (error.message.includes('permission')) {
        return res.status(403).json({ error: 'Permission denied to access spreadsheet' });
      }
      if (error.message.includes('authentication')) {
        return res.status(401).json({ error: 'Authentication failed' });
      }
    }
    
    return res.status(500).json({ 
      error: 'Failed to fetch product data'
    });
  }
}

// Helper function to clear cache (useful for webhooks)
export function clearCache(sheetId?: string) {
  if (sheetId) {
    // Clear specific sheet cache
    for (const key of cache.keys()) {
      if (key.startsWith(sheetId)) {
        cache.delete(key);
      }
    }
  } else {
    // Clear all cache
    cache.clear();
  }
}